name: Deploy to Azure

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
  
  # Auto-trigger after build workflow completes (on master branch)
  workflow_run:
    workflows: ["Build and Push Images"]
    branches: [devops-setup]
    types:
      - completed

jobs:
  deploy:
    name: Deploy to Azure Container Apps
    runs-on: ubuntu-latest
    # Skip if workflow_run trigger comes from a failed build
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      # Determine environment
      - name: Set Environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENV=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "ENV=dev" >> $GITHUB_OUTPUT
          fi
      
      # Download version artifact if this was triggered by workflow_run
      - name: Download Version Info
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: version-info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      
      - name: Extract Version Info
        if: ${{ github.event_name == 'workflow_run' }}
        run: |
          export VERSION=$(grep VERSION version.txt | cut -d= -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      # Login to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false
          allow-no-subscriptions: true
      
      # Get resource info
      - name: Get Resource Info
        id: resources
        run: |
          # Set resource group based on environment
          if [[ "${{ steps.env.outputs.ENV }}" == "prod" ]]; then
            RESOURCE_GROUP="nationohprod"
          else
            RESOURCE_GROUP="nohdevdec2001"
          fi
          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          
          # Get Container App names based on naming convention: {resource_group_name}{service}
          API_APP="${RESOURCE_GROUP}server"
          FRONTEND_APP="${RESOURCE_GROUP}frontend"
          echo "API_APP=$API_APP" >> $GITHUB_OUTPUT
          echo "FRONTEND_APP=$FRONTEND_APP" >> $GITHUB_OUTPUT
          
          # Get ACR details
          ACR_LOGIN_SERVER=$(az acr list -g $RESOURCE_GROUP --query "[0].loginServer" -o tsv)
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
          
          # Get Application Gateway FQDN (this is the public entry point)
          GATEWAY_FQDN=$(az network public-ip show -g $RESOURCE_GROUP -n "${RESOURCE_GROUP}-app-gateway-ip" --query "dnsSettings.fqdn" -o tsv)
          echo "GATEWAY_FQDN=$GATEWAY_FQDN" >> $GITHUB_OUTPUT
          
          # Get Container App FQDNs for Application Gateway backend pool configuration
          FRONTEND_FQDN=$(az containerapp show -n $FRONTEND_APP -g $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv)
          API_FQDN=$(az containerapp show -n $API_APP -g $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv)
          KEYCLOAK_FQDN=$(az containerapp show -n "${RESOURCE_GROUP}keycloak" -g $RESOURCE_GROUP --query "properties.configuration.ingress.fqdn" -o tsv)
          
          echo "FRONTEND_FQDN=$FRONTEND_FQDN" >> $GITHUB_OUTPUT
          echo "API_FQDN=$API_FQDN" >> $GITHUB_OUTPUT  
          echo "KEYCLOAK_FQDN=$KEYCLOAK_FQDN" >> $GITHUB_OUTPUT
      
      # Verify Infrastructure Prerequisites
      - name: Verify Infrastructure
        run: |
          RESOURCE_GROUP="${{ steps.resources.outputs.RESOURCE_GROUP }}"
          
          echo "üîç Verifying infrastructure components exist and are accessible..."
          
          # Verify Application Gateway exists and is operational
          echo "Checking Application Gateway..."
          GATEWAY_STATUS=$(az network application-gateway show \
            --name "NationOHAppGateway" \
            --resource-group $RESOURCE_GROUP \
            --query "operationalState" -o tsv 2>/dev/null || echo "NOT_FOUND")
          
          if [[ "$GATEWAY_STATUS" != "Running" ]]; then
            echo "‚ùå Application Gateway not running. Status: $GATEWAY_STATUS"
            exit 1
          fi
          echo "‚úÖ Application Gateway is running"
          
          # Verify Container Apps exist and have FQDNs
          echo "Checking Container Apps..."
          
          # Check Frontend
          if [[ -z "${{ steps.resources.outputs.FRONTEND_FQDN }}" ]]; then
            echo "‚ùå Frontend Container App FQDN is empty"
            exit 1
          fi
          echo "‚úÖ Frontend Container App FQDN: ${{ steps.resources.outputs.FRONTEND_FQDN }}"
          
          # Check API
          if [[ -z "${{ steps.resources.outputs.API_FQDN }}" ]]; then
            echo "‚ùå API Container App FQDN is empty"
            exit 1
          fi
          echo "‚úÖ API Container App FQDN: ${{ steps.resources.outputs.API_FQDN }}"
          
          # Check Keycloak
          if [[ -z "${{ steps.resources.outputs.KEYCLOAK_FQDN }}" ]]; then
            echo "‚ùå Keycloak Container App FQDN is empty"
            exit 1
          fi
          echo "‚úÖ Keycloak Container App FQDN: ${{ steps.resources.outputs.KEYCLOAK_FQDN }}"
          
          # Verify DNS resolution for Container App FQDNs
          echo "Testing DNS resolution..."
          nslookup ${{ steps.resources.outputs.FRONTEND_FQDN }} || echo "‚ö†Ô∏è Frontend DNS resolution failed"
          nslookup ${{ steps.resources.outputs.API_FQDN }} || echo "‚ö†Ô∏è API DNS resolution failed"
          nslookup ${{ steps.resources.outputs.KEYCLOAK_FQDN }} || echo "‚ö†Ô∏è Keycloak DNS resolution failed"
          
          # Test basic connectivity to Application Gateway
          echo "Testing Application Gateway connectivity..."
          GATEWAY_FQDN="${{ steps.resources.outputs.GATEWAY_FQDN }}"
          if [[ -n "$GATEWAY_FQDN" ]]; then
            # Test HTTP connectivity (should get some response, even if 404)
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "http://$GATEWAY_FQDN" || echo "000")
            if [[ "$HTTP_STATUS" != "000" ]]; then
              echo "‚úÖ Application Gateway is accessible (HTTP $HTTP_STATUS)"
            else
              echo "‚ö†Ô∏è Application Gateway HTTP connectivity test failed"
            fi
          else
            echo "‚ö†Ô∏è Application Gateway FQDN not found"
          fi
          
          echo "üîç Infrastructure verification completed"
      
      # Update API container app with latest image
      - name: Update API Container App
        run: |
          # If triggered by workflow_run, use the version from artifact
          if [[ -n "$VERSION" ]]; then
            IMAGE_TAG="${{ steps.resources.outputs.ACR_LOGIN_SERVER }}/app.server:$VERSION"
          else
            # Otherwise use the latest tag for the specified environment
            IMAGE_TAG="${{ steps.resources.outputs.ACR_LOGIN_SERVER }}/app.server:${{ steps.env.outputs.ENV }}-latest"
          fi
          
          az containerapp update \
            --name ${{ steps.resources.outputs.API_APP }} \
            --resource-group ${{ steps.resources.outputs.RESOURCE_GROUP }} \
            --image $IMAGE_TAG
      
      # Update Frontend container app with latest image
      - name: Update Frontend Container App
        run: |
          # If triggered by workflow_run, use the version from artifact
          if [[ -n "$VERSION" ]]; then
            IMAGE_TAG="${{ steps.resources.outputs.ACR_LOGIN_SERVER }}/app.client:$VERSION"
          else
            # Otherwise use the latest tag for the specified environment
            IMAGE_TAG="${{ steps.resources.outputs.ACR_LOGIN_SERVER }}/app.client:${{ steps.env.outputs.ENV }}-latest"
          fi
          
          az containerapp update \
            --name ${{ steps.resources.outputs.FRONTEND_APP }} \
            --resource-group ${{ steps.resources.outputs.RESOURCE_GROUP }} \
            --image $IMAGE_TAG
        
      # Update Server Container Environment Variables with Real FQDNs
      - name: Update Server Environment Variables
        run: |
          echo "=== Updating Server Environment Variables ==="
          
          # Get Application Gateway FQDN for Keycloak issuer URL
          GATEWAY_FQDN="${{ steps.resources.outputs.GATEWAY_FQDN }}"
          
          if [[ -n "$GATEWAY_FQDN" ]]; then
            echo "Updating server environment variables with Gateway FQDN: $GATEWAY_FQDN"
            
            # Update server container with proper Keycloak issuer URL and allowed hosts (no image update needed)
            az containerapp update \
              --name ${{ steps.resources.outputs.API_APP }} \
              --resource-group ${{ steps.resources.outputs.RESOURCE_GROUP }} \
              --set-env-vars \
                "IdentityConfig__Issuer=https://${GATEWAY_FQDN}/auth/realms/NationOH" \
                "AllowedHosts=${GATEWAY_FQDN}" || echo "Failed to update server environment variables"
            
            echo "‚úÖ Server environment variables updated successfully"
          else
            echo "‚ö†Ô∏è Warning: Gateway FQDN is empty, keeping placeholder values"
          fi
          
          # Wait for container to restart with new environment variables
          echo "Waiting 30 seconds for container restart..."
          sleep 30
      
      # Configure Application Gateway backend pools (Phase 2 configuration)
      - name: Configure Application Gateway Backend Pools
        run: |
          echo "=== Configuring Application Gateway Backend Pools ==="
          
          # Get Application Gateway name
          APP_GATEWAY_NAME="NationOHAppGateway"
          
          echo "Frontend FQDN: ${{ steps.resources.outputs.FRONTEND_FQDN }}"
          echo "API FQDN: ${{ steps.resources.outputs.API_FQDN }}"
          echo "Keycloak FQDN: ${{ steps.resources.outputs.KEYCLOAK_FQDN }}"
          
          # Check Application Gateway status first
          echo "Checking Application Gateway status..."
          GATEWAY_STATUS=$(az network application-gateway show \
            --name $APP_GATEWAY_NAME \
            --resource-group ${{ steps.resources.outputs.RESOURCE_GROUP }} \
            --query "operationalState" -o tsv)
          echo "Application Gateway operational state: $GATEWAY_STATUS"
          
          # Check if backend pools exist
          echo "Checking existing backend pools..."
          az network application-gateway address-pool list \
            --gateway-name $APP_GATEWAY_NAME \
            --resource-group ${{ steps.resources.outputs.RESOURCE_GROUP }} \
            --query "[].{Name:name, Servers:backendAddresses[].fqdn}" -o table
          
          # Update backend pools with actual Container App FQDNs
          if [[ -n "${{ steps.resources.outputs.FRONTEND_FQDN }}" ]]; then
            echo "Updating frontend backend pool..."
            az network application-gateway address-pool update \
              --gateway-name $APP_GATEWAY_NAME \
              --resource-group ${{ steps.resources.outputs.RESOURCE_GROUP }} \
              --name "frontend-backend-pool" \
              --servers ${{ steps.resources.outputs.FRONTEND_FQDN }} || echo "Frontend pool update failed"
          else
            echo "WARNING: Frontend FQDN is empty"
          fi
          
          if [[ -n "${{ steps.resources.outputs.API_FQDN }}" ]]; then
            echo "Updating API backend pool..."
            az network application-gateway address-pool update \
              --gateway-name $APP_GATEWAY_NAME \
              --resource-group ${{ steps.resources.outputs.RESOURCE_GROUP }} \
              --name "api-backend-pool" \
              --servers ${{ steps.resources.outputs.API_FQDN }} || echo "API pool update failed"
          else
            echo "WARNING: API FQDN is empty"
          fi
          
          if [[ -n "${{ steps.resources.outputs.KEYCLOAK_FQDN }}" ]]; then
            echo "Updating auth backend pool..."
            az network application-gateway address-pool update \
              --gateway-name $APP_GATEWAY_NAME \
              --resource-group ${{ steps.resources.outputs.RESOURCE_GROUP }} \
              --name "auth-backend-pool" \
              --servers ${{ steps.resources.outputs.KEYCLOAK_FQDN }} || echo "Auth pool update failed"
          else
            echo "WARNING: Keycloak FQDN is empty"
          fi
          
          # Show updated backend pools
          echo "Updated backend pools:"
          az network application-gateway address-pool list \
            --gateway-name $APP_GATEWAY_NAME \
            --resource-group ${{ steps.resources.outputs.RESOURCE_GROUP }} \
            --query "[].{Name:name, Servers:backendAddresses[].fqdn}" -o table
          
          echo "Backend pool configuration completed!"
      
      # Run smoke test via Application Gateway (public endpoint)
      - name: Smoke Test
        run: |
          GATEWAY_URL="http://${{ steps.resources.outputs.GATEWAY_FQDN }}"
          
          echo "=== Smoke Test via Application Gateway ==="
          echo "Gateway URL: $GATEWAY_URL"
          echo "Testing through Application Gateway (public entry point)..."
          
          # Wait for Application Gateway to be ready
          echo "Waiting 30 seconds for services to be ready..."
          sleep 30
          
          # Test API health endpoint via Application Gateway (matches container liveness probe)
          echo "Testing API health endpoint: $GATEWAY_URL/api/health"
          API_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 --retry 3 --retry-delay 10 "$GATEWAY_URL/api/health" || echo "failed")
          echo "API health check status: $API_HEALTH"
          
          # Test Frontend via Application Gateway
          echo "Testing Frontend: $GATEWAY_URL/"
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 --retry 3 --retry-delay 10 "$GATEWAY_URL/" || echo "failed")
          echo "Frontend status: $FRONTEND_STATUS"
          
          # Test Keycloak auth endpoint via Application Gateway
          echo "Testing Keycloak: $GATEWAY_URL/auth/realms/master/.well-known/openid-configuration"
          AUTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 --retry 3 --retry-delay 10 "$GATEWAY_URL/auth/realms/master/.well-known/openid-configuration" || echo "failed")
          echo "Auth status: $AUTH_STATUS"
          
          # Detailed debugging if tests fail
          if [[ "$API_HEALTH" != "200" && "$FRONTEND_STATUS" != "200" && "$AUTH_STATUS" != "200" ]]; then
            echo "=== All services failed - debugging ==="
            echo "Checking if Application Gateway is accessible..."
            curl -I --max-time 10 "$GATEWAY_URL" || echo "Gateway not accessible"
            
            echo "Checking DNS resolution..."
            nslookup ${{ steps.resources.outputs.GATEWAY_FQDN }} || echo "DNS resolution failed"
            
            echo "Checking Application Gateway backend health..."
            az network application-gateway show-backend-health \
              --name "NationOHAppGateway" \
              --resource-group ${{ steps.resources.outputs.RESOURCE_GROUP }} \
              --query "backendAddressPools[].{Pool:name, Health:backendHttpSettingsCollection[0].servers[0].health}" \
              -o table || echo "Could not get backend health"
            
            echo "Checking Application Gateway listeners..."
            az network application-gateway http-listener list \
              --gateway-name "NationOHAppGateway" \
              --resource-group ${{ steps.resources.outputs.RESOURCE_GROUP }} \
              --query "[].{Name:name, Port:frontendPort, Protocol:protocol}" \
              -o table || echo "Could not get listeners"
            
            echo "Checking if this is WAF blocking (try HTTP instead)..."
            HTTP_GATEWAY_URL="http://${{ steps.resources.outputs.GATEWAY_FQDN }}"
            echo "Testing HTTP endpoint: $HTTP_GATEWAY_URL"
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$HTTP_GATEWAY_URL" || echo "failed")
            echo "HTTP status: $HTTP_STATUS"
            
            exit 1
          elif [[ "$API_HEALTH" != "200" || "$FRONTEND_STATUS" != "200" ]]; then
            echo "=== Some services failed but gateway is responsive ==="
            echo "This is expected during initial deployment while containers start up"
            echo "Frontend: $FRONTEND_STATUS, API: $API_HEALTH, Auth: $AUTH_STATUS"
          else
            echo "=== Smoke tests passed! ==="
            echo "All services are accessible via Application Gateway"
          fi
