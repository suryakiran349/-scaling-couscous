name: Build and Push Images

permissions:
  id-token: write
  contents: read

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
  
  # Auto-trigger after infrastructure workflow completes
  workflow_run:
    workflows: ["Terraform Infrastructure"]
    branches: [master, devops-setup]
    types:
      - completed

jobs:
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    # Skip if workflow_run trigger comes from a failed infrastructure workflow
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Generate semantic version based on commits
      - name: Generate Version
        id: version
        run: |
          # Get short SHA
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          # Get branch name
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          # Generate timestamp in format YYYYMMDD-HHMMSS
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          
          # Create version
          VERSION="${BRANCH_NAME}-${TIMESTAMP}-${SHORT_SHA}"
          
          # Export as output
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "SHA=$SHORT_SHA" >> $GITHUB_OUTPUT
          
          # Set environment indicator
          if [[ "$BRANCH_NAME" == "master" ]]; then
            echo "ENV=dev" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == "production" ]]; then
            echo "ENV=prod" >> $GITHUB_OUTPUT
          else
            echo "ENV=dev" >> $GITHUB_OUTPUT
          fi
      
      # Login to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false
          allow-no-subscriptions: true

      # Set environment variables and get ACR details
      - name: Set Environment Variables
        id: vars
        run: |
          # Handle manual workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
              echo "ENV_NAME=prod" >> $GITHUB_OUTPUT
              echo "RESOURCE_GROUP=nationohprod" >> $GITHUB_OUTPUT
            else
              echo "ENV_NAME=dev" >> $GITHUB_OUTPUT
              echo "RESOURCE_GROUP=nohdevdec2005" >> $GITHUB_OUTPUT
            fi
          else
            # Handle branch-based triggers (workflow_run from infrastructure)
            if [[ ${{ github.ref }} == "refs/heads/production" ]]; then
              echo "ENV_NAME=prod" >> $GITHUB_OUTPUT
              echo "RESOURCE_GROUP=nationohprod" >> $GITHUB_OUTPUT
            elif [[ ${{ github.ref }} == "refs/heads/master" ]] || [[ ${{ github.ref }} == "refs/heads/devops-setup" ]]; then
              echo "ENV_NAME=dev" >> $GITHUB_OUTPUT
              echo "RESOURCE_GROUP=nohdevdec2005" >> $GITHUB_OUTPUT
            fi
          fi

      # Get ACR details
      - name: Get ACR Details
        id: acr
        run: |
          # Get ACR login server from the resource group
          ACR_LOGIN_SERVER=$(az acr list -g ${{ steps.vars.outputs.RESOURCE_GROUP }} --query "[0].loginServer" -o tsv)
          echo "LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
      
      # Log in to ACR
      - name: ACR Login
        run: |
          az acr login --name ${{ steps.vars.outputs.RESOURCE_GROUP }}registry
      
      # Build and push server image
      - name: Build and Push Server Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Server.Dockerfile
          push: true
          # May change the label of the image to something else in the future
          tags: |
            ${{ steps.acr.outputs.LOGIN_SERVER }}/app.server:${{ steps.version.outputs.VERSION }}
            ${{ steps.acr.outputs.LOGIN_SERVER }}/app.server:${{ steps.vars.outputs.ENV_NAME }}-latest
          build-args: |
            BUILD_VERSION=${{ steps.version.outputs.VERSION }}
      
      # Build and push client image (if needed)
      - name: Build and Push Client Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Client.Dockerfile
          push: true
          tags: |
            ${{ steps.acr.outputs.LOGIN_SERVER }}/app.client:${{ steps.version.outputs.VERSION }}
            ${{ steps.acr.outputs.LOGIN_SERVER }}/app.client:${{ steps.vars.outputs.ENV_NAME }}-latest
          build-args: |
            BUILD_VERSION=${{ steps.version.outputs.VERSION }}

      # Create deployment artifact with version info for deploy workflow
      - name: Create Version Artifact
        run: |
          echo "VERSION=${{ steps.version.outputs.VERSION }}" > version.txt
          echo "ENV=${{ steps.vars.outputs.ENV_NAME }}" >> version.txt
      
      - name: Upload Version Artifact
        uses: actions/upload-artifact@v4
        with:
          name: version-info
          path: version.txt
