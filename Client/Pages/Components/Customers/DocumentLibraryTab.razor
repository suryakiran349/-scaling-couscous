@using Shared.DTOs.CRM
@using MudBlazor
@inject IDialogService DialogService

<MudPaper Class="pa-4">
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-2">
        <MudText Typo="Typo.h6">Documents</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowDocumentUploadDialog"
            StartIcon="@Icons.Material.Filled.UploadFile">Upload New Document</MudButton>
    </MudStack>
    <MudTable T="DocumentDto" Items="Documents ?? new List<DocumentDto>()" Dense="true" Hover="true" Striped="true"
        Bordered="true">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>File Path</MudTh>
            <MudTh>Active</MudTh>
            <MudTh>Created By</MudTh>
            <MudTh>Created Date</MudTh>
            <MudTh>Modified By</MudTh>
            <MudTh>Modified Date</MudTh>
        </HeaderContent>
        <RowTemplate Context="docContext">
            @{
                var context = (DocumentDto)docContext;
            }
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="File Path">
                @if (!string.IsNullOrEmpty(context.FilePath))
                {
                    <MudLink Href="@context.FilePath" Target="_blank">View Document</MudLink>
                }
                else
                {
                    <MudText>No file available</MudText>
                }
            </MudTd>
            <MudTd DataLabel="Active">@context.IsActive</MudTd>
            <MudTd DataLabel="Created By">@context.CreatedBy</MudTd>
            <MudTd DataLabel="Created Date">@context.CreatedDate.ToString("g")</MudTd>
            <MudTd DataLabel="Modified By">@context.LastModifiedBy</MudTd>
            <MudTd DataLabel="Modified Date">@context.ModifiedDate.ToString("g")</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No documents found.</MudText>
        </NoRecordsContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudPaper>

<MudDialog @bind-Visible="_uploadDocumentDialogOpen" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Upload New Document</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="_newDocument.Name" Label="Document Name" Variant="Variant.Outlined"
            For="@(() => _newDocument.Name)" />
        <MudTextField @bind-Value="_newDocument.Description" Label="Description" Variant="Variant.Outlined" Lines="3"
            For="@(() => _newDocument.Description)" Class="mt-3" />
        <MudFileUpload T="IBrowserFile" FilesChanged="HandleFileSelected">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">
                    Select File  
                </MudButton>
            </ActivatorContent>
            <SelectedTemplate>
                @if (context != null)
                {
                    <MudText>@context.Name</MudText>
                }
                else
                {
                    <MudText>No File</MudText>
                }
            </SelectedTemplate>
        </MudFileUpload>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="UploadDocument" Disabled="_fileToUpload == null">Upload
        </MudButton>
        <MudButton OnClick="() => _uploadDocumentDialogOpen = false">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public List<DocumentDto> Documents { get; set; } = new();
    [Parameter] public EventCallback<Tuple<DocumentDto, IBrowserFile>> OnSave { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    private bool _uploadDocumentDialogOpen = false;
    private DocumentDto _newDocument = default!;
    private IBrowserFile? _fileToUpload;
    private DialogOptions _dialogOptions = new() { MaxWidth = MaxWidth.Small, FullWidth = true };
    private void ShowDocumentUploadDialog()
    {
        _newDocument = new DocumentDto
        { 
            FilePath = "placeholder",  // Temporary placeholder
            Name = "", 
            Description = "" 
        };
        _fileToUpload = null;
        _uploadDocumentDialogOpen = true;
    }
    private void HandleFileSelected(IBrowserFile file)
    {
        _fileToUpload = file;
    }
    private async Task UploadDocument()
    {
        if (_fileToUpload != null)
        {
            await OnSave.InvokeAsync(new Tuple<DocumentDto, IBrowserFile>(_newDocument, _fileToUpload));
            _uploadDocumentDialogOpen = false;
        }
    }
}