@namespace Client.Pages.Components.Calendar
@using ComposedHealthBase.Shared.Interfaces
@using ComposedHealthBase.Shared.Models
@using Heron.MudCalendar
@using Shared.DTOs.Scheduling
@using Client.Pages.Components.Calendar
@typeparam TResource where TResource : ICalendarResource<TCalendarItem>
@typeparam TCalendarItem where TCalendarItem : BaseCalendarItem

<MudGrid>
    <MudItem xs="12" Class="d-flex align-center">
        <MudButton OnClick="() => PrevClicked()">
            <MudIcon Icon="@Icons.Material.TwoTone.ChevronLeft" Color="Color.Primary" />
        </MudButton>
        <MudButton OnClick="() => CurrentDay = DateTime.Today">Today</MudButton>
        <MudButton OnClick="() => NextClicked()">
            <MudIcon Icon="@Icons.Material.TwoTone.ChevronRight" Color="Color.Primary" />
        </MudButton>
        
        <div class="d-flex mx-auto">
            <MudButton Class="@($"{(CalendarView == CalendarView.Day ? "mud-button-filled" : "mud-button-outlined")} mx-2")"
                OnClick="SwitchToDayView">Day</MudButton>
            <MudButton Class="@($"{(CalendarView == CalendarView.Week ? "mud-button-filled" : "mud-button-outlined")} mx-2")"
                OnClick="SwitchToWeekView">Week</MudButton>
            <MudButton Class="@($"{(CalendarView == CalendarView.WorkWeek ? "mud-button-filled" : "mud-button-outlined")} mx-2")"
                OnClick="SwitchToWorkWeekView">Workweek</MudButton>
            <MudButton Class="@($"{(CalendarView == CalendarView.Month ? "mud-button-filled" : "mud-button-outlined")} mx-2")"
                OnClick="SwitchToMonthView">Month</MudButton>
        </div>

        <div class="ml-auto" style="min-width: 200px;">
            <MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" T="string"
                Label="Select Resources" MultiSelection="true" @bind-Value="_value"
                @bind-SelectedValues="_selectedResources">
                @foreach (var resource in Resources)
                {
                    <MudSelectItem T="string" Value="@resource.AvatarTitle">@resource.AvatarTitle</MudSelectItem>
                }
            </MudSelect>
        </div>
    </MudItem>
</MudGrid>

@if (_selectedResources.Count() == 0)
{
    <MudPaper Class="pa-8 ma-2 max-w-xl">
        <MudText Typo="Typo.h6">Please select some resources to start.</MudText>
    </MudPaper>
}
else
{
    <div class="calendar-resource-group">
    @foreach (var resource in Resources.Where(r => _selectedResources.Contains(r.AvatarTitle)))
    {
        <div class="calendar-resource">
            <MudCard>
                <div class="calendar-resource-header">
                    <div class="calendar-resource-header-inner">
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar>
                                    <MudImage Src="@resource.AvatarImage"></MudImage>
                                </MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">@resource.AvatarTitle</MudText>
                                <MudText Typo="Typo.body2">@resource.AvatarDescription</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                    </div>
                </div>
                <MudCardContent>
                    <CustomMudCalendar TCalendarItem="TCalendarItem" Height=2000 CurrentDay=@CurrentDay ShowDay="CalendarView == CalendarView.Day"
                        ShowWeek="CalendarView == CalendarView.Week" ShowWorkWeek="CalendarView == CalendarView.WorkWeek"
                        ShowMonth="CalendarView == CalendarView.Month" ShowCurrentTime="true"
                        Items="@resource.CalendarItems" FirstDayOfWorkWeek="DayOfWeek.Monday"
                        FirstDayOfWeek="DayOfWeek.Monday" ShowToolbar="false"
                        CellClicked="CellClicked" ItemClicked="ItemClicked" />
                </MudCardContent>
            </MudCard>
            
        </div>
    }
</div>
}

@code {
    [Parameter] public IEnumerable<TResource> Resources { get; set; } = new List<TResource>();
    [Parameter] public EventCallback<TCalendarItem> ItemClickedCallback { get; set; }
    private DateTime CurrentDay = DateTime.Today;
    private CalendarView CalendarView { get; set; } = CalendarView.WorkWeek;

    private string _value = string.Empty;
    private IEnumerable<string> _selectedResources = new List<string>();

    protected override void OnInitialized()
    {

    }

    private void SwitchToDayView()
    {
        CalendarView = CalendarView.Day;
    }

    private void SwitchToWeekView()
    {
        CalendarView = CalendarView.Week;
    }

    private void SwitchToWorkWeekView()
    {
        CalendarView = CalendarView.WorkWeek;
    }

    private void SwitchToMonthView()
    {
        CalendarView = CalendarView.Month;
    }

    private void PrevClicked()
    {
        switch (CalendarView)
        {
            case CalendarView.Day:
                CurrentDay = CurrentDay.AddDays(-1);
                break;
            case CalendarView.Week:
                CurrentDay = CurrentDay.AddDays(-7);
                break;
            case CalendarView.WorkWeek:
                CurrentDay = CurrentDay.AddDays(-7);
                break;
            case CalendarView.Month:
                CurrentDay = CurrentDay.AddMonths(-1);
                break;
        }
    }

    private void NextClicked()
    {
        switch (CalendarView)
        {
            case CalendarView.Day:
                CurrentDay = CurrentDay.AddDays(1);
                break;
            case CalendarView.Week:
                CurrentDay = CurrentDay.AddDays(7);
                break;
            case CalendarView.WorkWeek:
                CurrentDay = CurrentDay.AddDays(7);
                break;
            case CalendarView.Month:
                CurrentDay = CurrentDay.AddMonths(1);
                break;
        }
    }
    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"Selected clinicians: {(selectedValues.Count() == 0 ? "(None)" : string.Join(", ", selectedValues.Select(x => x)))}";
    }
        [Inject]
    private IDialogService DialogService { get; set; } = default!;
    private Task CellClicked(DateTime dateTime)
    {
        return DialogService.ShowMessageBox("Cell Clicked", dateTime.ToString(Thread.CurrentThread.CurrentCulture));
    }

    private Task ItemClicked(TCalendarItem item)
    {
        ItemClickedCallback.InvokeAsync(item);
        return DialogService.ShowMessageBox("Item Clicked", item.Text);
    }
}