@page "/employees"
@using Shared.DTOs.CRM
@using MudBlazor
@using Client.Pages.Forms
@inject IHttpClientFactory HttpClientFactory

<h1>Employees</h1>

<MudAutocomplete T="EmployeeDto" ToStringFunc="@EmployeeToString" Label="Employee Name or DOB"
    @bind-Value="selectedEmployee" SearchFunc="@Search" Variant="Variant.Outlined" ShowProgressIndicator="true"
    ProgressIndicatorColor="Color.Default" />

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    @if (selectedEmployee != null)
    {
        <MudTabPanel Text="Employees">
            <EmployeeDetails Model="selectedEmployee" OnSubmit="HandleSubmit" />
        </MudTabPanel>
        <MudTabPanel Text="Appointments">
            <MudText>Appointments Content</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Referrals">
            <MudText>Referrals Content</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Managers">
            <MudText>Managers Content</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Services">
            <MudText>Services Content</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Invoicing">
            <MudText>Invoicing Content</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Documents">
            <MudText>Documents Content</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Reports">
            <MudText>Reports Content</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Notes">
            <MudText>Notes Content</MudText>
        </MudTabPanel>
    }
</MudTabs>

@code {
    private List<EmployeeDto> employeeList = new();
    private EmployeeDto? selectedEmployee;
    private HttpClient httpClient = default!;

    private string EmployeeToString(EmployeeDto? e)
    {
        return e is null ? string.Empty : $"{e.FirstName} {e.LastName} - {e.Id}";
    }

    protected override void OnInitialized()
    {
        httpClient = HttpClientFactory.CreateClient("api");
    }

    private async Task<IEnumerable<EmployeeDto>> Search(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value)) return employeeList;

        var result = await httpClient.GetFromJsonAsync<IEnumerable<EmployeeDto>>("api/employee/search?term=" + value, token);
        if (result is not null)
        {
            employeeList.AddRange(result);
        }
        return result ?? employeeList;
            }

    private Task HandleSubmit(EmployeeDto employee)
    {
        // Handle submit logic here (e.g., save employee)
        return Task.CompletedTask;
        }
   } 
            