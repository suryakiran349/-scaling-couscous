@page "/"
@using Client.Pages.Components
@using ComposedHealthBase.Shared.Interfaces
@using Shared.DTOs.CRM
@using Client.Pages.Forms
@using Shared.DTOs.Scheduling
@using MudBlazor
@using Client.Pages.Components.Calendar
@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize]

<PageTitle>Diary</PageTitle>

<MudText Typo="Typo.h1">Diary</MudText>

<div class="d-flex justify-end mb-4">
    <MudButton variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddAppointmentModal">Add Appointment
    </MudButton>
</div>

<MultiResourceCalendar Resources="@Clinicians" TResource="ClinicianDto" TCalendarItem="ScheduleDto" />

<MudDialog @bind-is-open="_isModalOpen">
    <DialogContent>
        <MudText Typo="Typo.h6">@(_editingSchedule?.Id > 0 ? "Edit Appointment" : "Add Appointment")</MudText>
        <MudTextField @bind-Value="_editingSchedule.Title" Label="Title" />
        <MudTextField @bind-Value="_editingSchedule.Description" Label="Description" />
        <MudTextField @bind-Value="_editingSchedule.CustomerId" Label="Customer Id" />
        <MudTextField @bind-Value="_editingSchedule.ReferralId" Label="Referral Id" />
        <MudTextField @bind-Value="_editingSchedule.EmployeeId" Label="Patient Id" />
        <MudTextField @bind-Value="_editingSchedule.ClinicianId" Label="Clinician Id" />
        <MudDatePicker @bind-Date="_editingSchedule.StartTime" Label="Start" />
        <MudDatePicker @bind-Date="_editingSchedule.EndTime" Label="End" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="SaveAppointment" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="CloseModal">Cancel</MudButton>
        @if (_editingSchedule?.Id > 0)
        {
            <MudButton OnClick="DeleteAppointment" Color="Color.Error">Delete</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    private IEnumerable<ClinicianDto> Clinicians { get; set; } = new List<ClinicianDto>();
    private IEnumerable<ReferralDto> Referrals { get; set; } = new List<ReferralDto>();
    private HttpClient httpClient = default!;

    private bool _isModalOpen = false;
    private ScheduleDto _editingSchedule = new ScheduleDto
    {
        Title = string.Empty,
        Description = string.Empty
    };

    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("api");
        try
        {
            var clinicians = await httpClient.GetFromJsonAsync<IEnumerable<ClinicianDto>>("api/clinician/getall");
            Clinicians = clinicians ?? new List<ClinicianDto>();

            var referrals = await httpClient.GetFromJsonAsync<IEnumerable<ReferralDto>>("api/referral/getall");
            Referrals = referrals ?? new List<ReferralDto>();

            await LoadClinicians();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task OpenAddAppointmentModal()
    {
        // Create a new schedule with default values
        var newSchedule = new ScheduleDto
        {
            Title = string.Empty,
            Description = string.Empty,
            Start = DateTime.UtcNow,
            End = DateTime.UtcNow.AddHours(1)
        };

        // Show the dialog
        var parameters = new DialogParameters
        {
        { "model", newSchedule },
        { "Clinicians", Clinicians },
        { "Referrals", Referrals }
        };
        var dialogReference = await DialogService.ShowAsync<Forms.ScheduleDetails>("Add Appointment", parameters);
        var dialogResult = await dialogReference.Result;

        if (dialogResult?.Data is ScheduleDto schedule)
        {
            try
            {
                var response = await httpClient.PostAsJsonAsync("api/schedule/create", schedule);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Appointment created successfully");
                    await LoadClinicians();
                }
                else
                {
                    Snackbar.Add($"Failed to create appointment: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error creating appointment: {ex.Message}");
            }
        }
    }
    private async Task LoadClinicians()
    {
        var clinicians = await httpClient.GetFromJsonAsync<IEnumerable<ClinicianDto>>("api/clinician/getallclinicianswithschedules");
        Clinicians = clinicians ?? new List<ClinicianDto>();
    }

    private void OnCalendarItemClick(ScheduleDto item)
    {
        _editingSchedule = new ScheduleDto
        {
            Id = item.Id,
            Title = item.Title,
            Description = item.Description,
            CustomerId = item.CustomerId,
            ReferralId = item.ReferralId,
            EmployeeId = item.EmployeeId,
            ClinicianId = item.ClinicianId,
            Start = item.Start,
            End = item.End
        };
        _isModalOpen = true;
    }

    private void CloseModal()
    {
        _isModalOpen = false;
    }

    private Task SaveAppointment()
    {
        _isModalOpen = false;
        return Task.CompletedTask;
    }

    private Task DeleteAppointment()
    {
        _isModalOpen = false;
        return Task.CompletedTask;
    }
}
