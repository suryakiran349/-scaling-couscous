@using MudBlazor
@using Shared.DTOs.Scheduling
@using Shared.DTOs.CRM
@inject ISnackbar Snackbar
@inject IHttpClientFactory HttpClientFactory

<MudForm Model="@_model" @ref="@form" ValidationDelay="0">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudSelect T="long" Label="Customer" Value="_model.CustomerId" ValueChanged="OnCustomerChanged">
                @foreach (var customer in _customers)
                {
                    <MudSelectItem T="long" Value="@customer.Id">@customer.Name</MudSelectItem>
                }
            </MudSelect>
            @if (_model.CustomerId != 0)
            {
                <MudSelect T="long" Label="Patient" @bind-Value="_model.EmployeeId">
                    @foreach (var employee in _employees)
                    {
                        <MudSelectItem T="long" Value="@employee.Id">@employee.FirstName @employee.LastName</MudSelectItem>
                    }
                </MudSelect>
            }
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField @bind-Value="_model.ReferralDetails" For="@(() => _model.ReferralDetails)" Immediate="true"
                Label="Referral Details" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="_model.DocumentId" For="@(() => _model.DocumentId)" Immediate="true"
                Label="Document ID" Variant="Variant.Outlined" />
        </MudItem>
    </MudGrid>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
            OnClick="@(async () => await Submit())">Add Referral</MudButton>
    </MudCardActions>
</MudForm>

@code {
    MudForm form = default!;
    ReferralDto _model = new ReferralDto();

    private IEnumerable<CustomerDto> _customers = new List<CustomerDto>();
    private IEnumerable<EmployeeDto> _employees = new List<EmployeeDto>();

    private HttpClient httpClient = default!;

    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("api");
        // Load customers on initialization
        var response = await httpClient.GetAsync("api/customer/getall");
        if (response.IsSuccessStatusCode)
        {
            var customers = await response.Content.ReadFromJsonAsync<List<CustomerDto>>();
            if (customers != null)
                _customers = customers;
        }
    }

    private async Task OnCustomerChanged(long customerId)
    {
        _model.CustomerId = customerId;
        _model.EmployeeId = 0;
        _employees = new List<EmployeeDto>();

        if (customerId != 0)
        {
            var response = await httpClient.GetAsync($"api/employee/getbycustomer/{customerId}");
            if (response.IsSuccessStatusCode)
            {
                var employees = await response.Content.ReadFromJsonAsync<List<EmployeeDto>>();
                if (employees != null)
                    _employees = employees;
            }
        }
        StateHasChanged();
    }

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            await httpClient.PostAsJsonAsync("api/referral/create", _model);
            Snackbar.Add("Referral added successfully", Severity.Success);
        }
    }
}